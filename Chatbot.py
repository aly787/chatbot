# Works
# Using gpt-3.5-turbo


from openai import OpenAI
import os

client = OpenAI(api_key="")

def read_documentation(file_path):
    with open(file_path, 'r') as file:
        return file.read()

def split_documentation(doc, chunk_size=2000):
    # Splitting documentation into chunks
    return [doc[i:i+chunk_size] for i in range(0, len(doc), chunk_size)]

def chatbot(query, documentation_chunks):
    """
    Function to get a response from OpenAI's language model based on the product documentation.
    
    Parameters:
    query (str): The user's query about the product.
    documentation_chunks (list): The complete product documentation split into chunks.

    Returns:
    str: The response generated by the language model.
    """

    for chunk in documentation_chunks:
        try:
            # Sending request to OpenAI with the correct endpoint for chat models (set system content as the "context" whereas the users content is the query)
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": chunk},
                    {"role": "user", "content": query}
                ]
            )
            # Extracting the response
            answer = response.choices[0].message.content.strip()

            # If a relevant answer is found, return it
            if answer:
                return answer
        except Exception as e:
            return str(e)

    return "The information requested could not be found in the provided documentation."

# Reading the documentation
file_path = 'database-backup-and-recovery-users-guide-2.txt'
documentation = read_documentation(file_path)
documentation_chunks = split_documentation(documentation)

# Testing
queries = [
    "What is the primary purpose of a backup and recovery strategy according to Oracle's documentation?",
    "Explain the difference between physical and logical backups in Oracle databases.",
    "What are incremental backups and what advantage do they offer in Oracle's RMAN-based backup and recovery strategy?"
]

for query in queries:
    response = chatbot(query, documentation_chunks)
    print(f"Query: {query}")
    print(f"Response: {response}\n")